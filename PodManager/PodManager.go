// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PodManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IBitcoinPodManagerBitcoinDepositRequest is an auto generated low-level Go binding around an user-defined struct.
type IBitcoinPodManagerBitcoinDepositRequest struct {
	TransactionId [32]byte
	Amount        *big.Int
	IsPending     bool
}

// PodManagerMetaData contains all meta data concerning the PodManager contract.
var PodManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"confirmBitcoinDeposit\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"transactionId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createPod\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"btcAddress\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegatePod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"appContract\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getAppRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBitDSMRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBitDSMServiceManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBitcoinDepositRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBitcoinPodManager.BitcoinDepositRequest\",\"components\":[{\"name\":\"transactionId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"isPending\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBitcoinWithdrawalAddress\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPodApp\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalTVL\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getUserPod\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"appRegistry_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"bitDSMRegistry_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"bitDSMServiceManager_\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"lockPod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSignedBitcoinWithdrawTransactionPod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"signedBitcoinWithdrawTransaction\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"undelegatePod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unlockPod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifyBitcoinDepositRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"transactionId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinAsTokens\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinCompleteTxRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"preSignedWithdrawTransaction\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"withdrawAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinPSBTRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"withdrawAddress\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"BitcoinBurned\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinDepositConfirmed\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinMinted\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinWithdrawalCompleteTxRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"preSignedBitcoinTx\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinWithdrawalPSBTRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"withdrawAddress\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinWithdrawnFromPod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"withdrawAddress\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PodCreated\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PodDelegated\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"appContract\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PodUndelegated\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TotalTVLUpdated\",\"inputs\":[{\"name\":\"newTVL\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"VerifyBitcoinDepositRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"bitcoinDepositRequest\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structIBitcoinPodManager.BitcoinDepositRequest\",\"components\":[{\"name\":\"transactionId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"isPending\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"anonymous\":false}]",
	Bin: "0x608060405234801561000f575f80fd5b5060043610610187575f3560e01c806385974473116100d9578063d475ab0311610093578063ed1dfe0b1161006e578063ed1dfe0b146103d9578063f2fde38b146103ec578063f99b67c9146103ff578063fe64d40114610412575f80fd5b8063d475ab0314610388578063d5062c771461039b578063da600a8a146103ae575f80fd5b806385974473146102965780638da5cb5b14610322578063b4ff8ff114610333578063b9dc6dae14610344578063c07eea4814610355578063c0c53b8b14610375575f80fd5b80633f4ba83a116101445780637104c3df1161011f5780637104c3df14610260578063715018a6146102735780637de2970d1461027b5780638456cb591461028e575f80fd5b80633f4ba83a1461022f5780635b674bc9146102375780635c975abb1461024a575f80fd5b80630c021ae51461018b5780630f2daf30146101a0578063221d3300146101e357806323e33cfd146101f85780632b6bbf7514610209578063397ee69b1461021c575b5f80fd5b5f546040519081526020015b60405180910390f35b6101cb6101ae366004612071565b6001600160a01b039081165f908152600560205260409020541690565b6040516001600160a01b039091168152602001610197565b6101f66101f1366004612071565b610425565b005b6001546001600160a01b03166101cb565b6101f6610217366004612151565b610543565b6101f661022a3660046121c2565b61081a565b6101f6610988565b6101f66102453660046121c2565b61099a565b609f5460ff166040519015158152602001610197565b6101f661026e3660046121f4565b610b98565b6101f6610e6e565b6101f6610289366004612071565b610e7f565b6101f6610f75565b6102fe6102a4366004612071565b60408051606080820183525f80835260208084018290529284018190526001600160a01b03949094168452600682529282902082519384018352805484526001810154918401919091526002015460ff1615159082015290565b60408051825181526020808401519082015291810151151590820152606001610197565b606d546001600160a01b03166101cb565b6002546001600160a01b03166101cb565b6003546001600160a01b03166101cb565b610368610363366004612071565b610f85565b604051610197919061226f565b6101f6610383366004612281565b61102e565b6101f6610396366004612071565b611193565b6101f66103a93660046121f4565b6113c9565b6101cb6103bc366004612071565b6001600160a01b039081165f908152600460205260409020541690565b6101f66103e7366004612071565b611458565b6101f66103fa366004612071565b611549565b6101f661040d3660046122c9565b6115c2565b6101cb6104203660046121f4565b611793565b61042d611a4a565b600260d154036104585760405162461bcd60e51b815260040161044f90612300565b60405180910390fd5b600260d1556001600160a01b038082165f9081526005602052604090205416806104945760405162461bcd60e51b815260040161044f90612337565b336001600160a01b038216146104ec5760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c792064656c656761746564206170702063616e206c6f636b0000000000604482015260640161044f565b816001600160a01b031663f83d08ba6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610524575f80fd5b505af1158015610536573d5f803e3d5ffd5b5050600160d15550505050565b61054b611a4a565b600260d1540361056d5760405162461bcd60e51b815260040161044f90612300565b600260d155335f9081526004602052604090205483906001600160a01b038083169116146105ad5760405162461bcd60e51b815260040161044f90612362565b6001600160a01b0384165f90815260076020526040902080546105cf9061238d565b15905061061e5760405162461bcd60e51b815260206004820152601c60248201527f5769746864726177616c20616c72656164792072657175657374656400000000604482015260640161044f565b5f8251116106695760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964207769746864726177206164647265737360401b604482015260640161044f565b836001600160a01b031663a4e2d6346040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106c991906123c5565b156107065760405162461bcd60e51b815260206004820152600d60248201526c141bd9081a5cc81b1bd8dad959609a1b604482015260640161044f565b6001600160a01b038481165f90815260056020526040902054161561073d5760405162461bcd60e51b815260040161044f906123e4565b5f846001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa15801561077a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061079e919061240e565b6001600160a01b0386165f9081526007602052604090209091506107c28482612475565b50806001600160a01b0316856001600160a01b03167fef73d097c5517b2b5d2dbffb17b0f948b5d7606055610ed1cad57aaa439e94f686604051610806919061226f565b60405180910390a35050600160d155505050565b610822611a4a565b600260d154036108445760405162461bcd60e51b815260040161044f90612300565b600260d1556001546001600160a01b031633146108735760405162461bcd60e51b815260040161044f90612531565b6001600160a01b0383165f908152600660209081526040918290208251606081018452815480825260018301549382019390935260029091015460ff1615159281019290925283146109005760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d1c985b9cd858dd1a5bdb881a5960521b604482015260640161044f565b5f60408201526109108483611a90565b836001600160a01b03167fcd774d9acd3dba4b6906137578fb72af62a91a12e8943e076232cb691cc96cef8360405161094b91815260200190565b60405180910390a25050506001600160a01b03165f908152600660205260408120818155600180820192909255600201805460ff1916905560d155565b610990611c13565b610998611c6d565b565b6109a2611a4a565b600260d154036109c45760405162461bcd60e51b815260040161044f90612300565b600260d155335f9081526004602052604090205483906001600160a01b03808316911614610a045760405162461bcd60e51b815260040161044f90612362565b6001600160a01b0384165f9081526006602052604090206002015460ff1615610a6f5760405162461bcd60e51b815260206004820152601760248201527f5265717565737420616c72656164792070656e64696e67000000000000000000604482015260640161044f565b60408051606081018252848152602080820185815260018385018181526001600160a01b038a165f818152600686528781208751815594519385019390935590516002909301805460ff1916931515939093179092558451631cfe878d60e31b8152945193949093919263e7f43c68926004808401938290030181865afa158015610afc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b20919061240e565b9050806001600160a01b0316866001600160a01b03167f19e46e0ef253a265a935e867bddd4047e0ea6700a3b5254cc16dea197da7595e84604051610b839190815181526020808301519082015260409182015115159181019190915260600190565b60405180910390a35050600160d15550505050565b610ba0611a4a565b600260d15403610bc25760405162461bcd60e51b815260040161044f90612300565b600260d155335f9081526004602052604090205482906001600160a01b03808316911614610c025760405162461bcd60e51b815260040161044f90612362565b6001600160a01b0383165f9081526007602052604090208054610c249061238d565b159050610c735760405162461bcd60e51b815260206004820152601c60248201527f5769746864726177616c20616c72656164792072657175657374656400000000604482015260640161044f565b5f825111610cbe5760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964207769746864726177206164647265737360401b604482015260640161044f565b826001600160a01b031663a4e2d6346040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cfa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d1e91906123c5565b15610d5b5760405162461bcd60e51b815260206004820152600d60248201526c141bd9081a5cc81b1bd8dad959609a1b604482015260640161044f565b6001600160a01b038381165f908152600560205260409020541615610d925760405162461bcd60e51b815260040161044f906123e4565b5f836001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610df3919061240e565b6001600160a01b0385165f908152600760205260409020909150610e178482612475565b50806001600160a01b0316846001600160a01b03167fe6142438106d9245d23d95a8dcc0141c9e63e96b0e2a9655b213ca6bd50af01185604051610e5b919061226f565b60405180910390a35050600160d1555050565b610e76611c13565b6109985f611cbf565b610e87611a4a565b600260d15403610ea95760405162461bcd60e51b815260040161044f90612300565b600260d1556001600160a01b038082165f908152600560205260409020541680610ee55760405162461bcd60e51b815260040161044f90612337565b336001600160a01b03821614610f3d5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c792064656c656761746564206170702063616e20756e6c6f636b000000604482015260640161044f565b816001600160a01b031663a69df4b56040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610524575f80fd5b610f7d611c13565b610998611d10565b6001600160a01b0381165f908152600760205260409020805460609190610fab9061238d565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd79061238d565b80156110225780601f10610ff957610100808354040283529160200191611022565b820191905f5260205f20905b81548152906001019060200180831161100557829003601f168201915b50505050509050919050565b603a54610100900460ff161580801561104e5750603a54600160ff909116105b806110685750303b1580156110685750603a5460ff166001145b6110cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161044f565b603a805460ff1916600117905580156110ee57603a805461ff0019166101001790555b6110f6611d4d565b6110fe611d7c565b611106611dab565b600280546001600160a01b038087166001600160a01b0319928316179092556003805486841690831617905560018054928516929091169190911790555f8055801561118d57603a805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50505050565b61119b611a4a565b600260d154036111bd5760405162461bcd60e51b815260040161044f90612300565b600260d1556001546001600160a01b031633146111ec5760405162461bcd60e51b815260040161044f90612531565b6001600160a01b0381165f908152600760205260409020805461120e9061238d565b90505f036112565760405162461bcd60e51b8152602060048201526015602482015274139bc81dda5d1a191c985dd85b081c995c5d595cdd605a1b604482015260640161044f565b6001600160a01b0381165f90815260076020526040812080546112789061238d565b80601f01602080910402602001604051908101604052809291908181526020018280546112a49061238d565b80156112ef5780601f106112c6576101008083540402835291602001916112ef565b820191905f5260205f20905b8154815290600101906020018083116112d257829003601f168201915b5050505050905061135f82836001600160a01b031663149c0b5c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611336573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061135a91906125a9565b611dda565b816001600160a01b03167f6dd3dd303209228b16cce56d4dfeb8116c23e6b9374927841bb4557b1e68664382604051611398919061226f565b60405180910390a26001600160a01b0382165f9081526007602052604081206113c091612001565b5050600160d155565b6113d1611a4a565b6001546001600160a01b031633146113fb5760405162461bcd60e51b815260040161044f90612531565b60405163326cca8560e01b81526001600160a01b0383169063326cca859061142790849060040161226f565b5f604051808303815f87803b15801561143e575f80fd5b505af1158015611450573d5f803e3d5ffd5b505050505050565b611460611a4a565b600260d154036114825760405162461bcd60e51b815260040161044f90612300565b600260d155335f908152600460205260409020546001600160a01b038281169116146114c05760405162461bcd60e51b815260040161044f90612362565b6001600160a01b038181165f90815260056020526040902054166114f65760405162461bcd60e51b815260040161044f90612337565b6001600160a01b0381165f8181526005602052604080822080546001600160a01b0319169055517ffde114ec59a374c36954512dafbedfd68f4c4d137190476a76cddccd24697a3a9190a250600160d155565b611551611c13565b6001600160a01b0381166115b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161044f565b6115bf81611cbf565b50565b6115ca611a4a565b600260d154036115ec5760405162461bcd60e51b815260040161044f90612300565b600260d155335f908152600460205260409020546001600160a01b0383811691161461162a5760405162461bcd60e51b815260040161044f90612362565b600254604051638403be9160e01b81526001600160a01b03838116600483015290911690638403be9190602401602060405180830381865afa158015611672573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061169691906123c5565b6116d95760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a5908185c1c0818dbdb9d1c9858dd60621b604482015260640161044f565b6001600160a01b038281165f9081526005602052604090205416156117385760405162461bcd60e51b8152602060048201526015602482015274141bd908185b1c9958591e4819195b1959d85d1959605a1b604482015260640161044f565b6001600160a01b038281165f8181526005602052604080822080546001600160a01b0319169486169485179055517fef32074b263175118a4614cc3e2742c50b70facbf865c0c26da767dd095e167d9190a35050600160d155565b5f61179c611a4a565b600260d154036117be5760405162461bcd60e51b815260040161044f90612300565b600260d155335f908152600460205260409020546001600160a01b0316156118215760405162461bcd60e51b8152602060048201526016602482015275155cd95c88185b1c9958591e481a185cc818481c1bd960521b604482015260640161044f565b60035460405163c8bc872360e01b81526001600160a01b0385811660048301529091169063c8bc872390602401602060405180830381865afa158015611869573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061188d91906123c5565b6118cc5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21037b832b930ba37b960811b604482015260640161044f565b6003546040516339c2182760e01b81526001600160a01b0385811660048301525f9216906339c21827906024015f60405180830381865afa158015611913573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261193a91908101906125c0565b90505f3060405161194a90612038565b6001600160a01b039091168152602001604051809103905ff080158015611973573d5f803e3d5ffd5b5060405163fb618e2160e01b81529091506001600160a01b0382169063fb618e21906119a9903390899087908a90600401612635565b5f604051808303815f87803b1580156119c0575f80fd5b505af11580156119d2573d5f803e3d5ffd5b5050335f90815260046020526040902080546001600160a01b0319166001600160a01b03851617905550611a039050565b6040516001600160a01b03808716919083169033907f9bec3cb55fcd181aaece51ed577f8a95b847c8af90535a81a7fa7d1c20138ef9905f90a4600160d155949350505050565b609f5460ff16156109985760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161044f565b6001600160a01b038281165f908152600560205260409020541615611ac75760405162461bcd60e51b815260040161044f906123e4565b5f8290505f816001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b08573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b2c919061240e565b6040516340c10f1960e01b81526001600160a01b03808316600483015260248201869052919250908316906340c10f19906044015f604051808303815f87803b158015611b77575f80fd5b505af1158015611b89573d5f803e3d5ffd5b50505050825f80828254611b9d9190612691565b90915550506040518381526001600160a01b038516907f5aca106588d0e1ebb9128b3f4b196bc949a208e38d3db913363353402fe73bd3906020015b60405180910390a27f6781bb9c83a65d946aefe506cbfb0817b2c859b3a822b74302fc199678c680de5f5460405161118491815260200190565b606d546001600160a01b031633146109985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b611c75611f27565b609f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b611d18611a4a565b609f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ca23390565b603a54610100900460ff16611d745760405162461bcd60e51b815260040161044f906126aa565b610998611f70565b603a54610100900460ff16611da35760405162461bcd60e51b815260040161044f906126aa565b610998611fa0565b603a54610100900460ff16611dd25760405162461bcd60e51b815260040161044f906126aa565b610998611fd3565b6001600160a01b038281165f908152600560205260409020541615611e115760405162461bcd60e51b815260040161044f906123e4565b5f8290505f816001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e52573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e76919061240e565b604051632770a7eb60e21b81526001600160a01b0380831660048301526024820186905291925090831690639dc29fac906044015f604051808303815f87803b158015611ec1575f80fd5b505af1158015611ed3573d5f803e3d5ffd5b50505050825f80828254611ee791906126f5565b90915550506040518381526001600160a01b038516907fab3f63d5d40e3fa7b8c0bece27a98227873fd63e10d0da6e8fcefc6e510d3f1d90602001611bd9565b609f5460ff166109985760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161044f565b603a54610100900460ff16611f975760405162461bcd60e51b815260040161044f906126aa565b61099833611cbf565b603a54610100900460ff16611fc75760405162461bcd60e51b815260040161044f906126aa565b609f805460ff19169055565b603a54610100900460ff16611ffa5760405162461bcd60e51b815260040161044f906126aa565b600160d155565b50805461200d9061238d565b5f825580601f1061201c575050565b601f0160209004905f5260205f20908101906115bf9190612045565b610f128061270983390190565b5b80821115612059575f8155600101612046565b5090565b6001600160a01b03811681146115bf575f80fd5b5f60208284031215612081575f80fd5b813561208c8161205d565b9392505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156120d0576120d0612093565b604052919050565b5f67ffffffffffffffff8211156120f1576120f1612093565b50601f01601f191660200190565b5f82601f83011261210e575f80fd5b813561212161211c826120d8565b6120a7565b818152846020838601011115612135575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f60608486031215612163575f80fd5b833561216e8161205d565b9250602084013567ffffffffffffffff8082111561218a575f80fd5b612196878388016120ff565b935060408601359150808211156121ab575f80fd5b506121b8868287016120ff565b9150509250925092565b5f805f606084860312156121d4575f80fd5b83356121df8161205d565b95602085013595506040909401359392505050565b5f8060408385031215612205575f80fd5b82356122108161205d565b9150602083013567ffffffffffffffff81111561222b575f80fd5b612237858286016120ff565b9150509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61208c6020830184612241565b5f805f60608486031215612293575f80fd5b833561229e8161205d565b925060208401356122ae8161205d565b915060408401356122be8161205d565b809150509250925092565b5f80604083850312156122da575f80fd5b82356122e58161205d565b915060208301356122f58161205d565b809150509250929050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602080825260119082015270141bd9081b9bdd0819195b1959d85d1959607a1b604082015260600190565b6020808252601190820152702737ba103a3432903837b21037bbb732b960791b604082015260600190565b600181811c908216806123a157607f821691505b6020821081036123bf57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f602082840312156123d5575f80fd5b8151801515811461208c575f80fd5b60208082526010908201526f141bd9081a5cc819195b1959d85d195960821b604082015260600190565b5f6020828403121561241e575f80fd5b815161208c8161205d565b601f82111561247057805f5260205f20601f840160051c8101602085101561244e5750805b601f840160051c820191505b8181101561246d575f815560010161245a565b50505b505050565b815167ffffffffffffffff81111561248f5761248f612093565b6124a38161249d845461238d565b84612429565b602080601f8311600181146124d6575f84156124bf5750858301515b5f19600386901b1c1916600185901b178555611450565b5f85815260208120601f198616915b82811015612504578886015182559484019460019091019084016124e5565b508582101561252157878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526052908201527f426974636f696e506f644d616e616765722e6f6e6c7942697444534d5365727660408201527f6963654d616e616765723a2063616c6c6572206973206e6f74207468652042696060820152713a2229a6a9b2b93b34b1b2a6b0b730b3b2b960711b608082015260a00190565b5f602082840312156125b9575f80fd5b5051919050565b5f602082840312156125d0575f80fd5b815167ffffffffffffffff8111156125e6575f80fd5b8201601f810184136125f6575f80fd5b805161260461211c826120d8565b818152856020838501011115612618575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b6001600160a01b038581168252841660208201526080604082018190525f9061266090830185612241565b82810360608401526126728185612241565b979650505050505050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156126a4576126a461267d565b92915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b818103818111156126a4576126a461267d56fe60a0604052348015600e575f80fd5b50604051610f12380380610f12833981016040819052602b91603b565b6001600160a01b03166080526066565b5f60208284031215604a575f80fd5b81516001600160a01b0381168114605f575f80fd5b9392505050565b608051610e716100a15f395f81816101a70152818161034e015281816103af0152818161051f0152818161061301526106fc0152610e715ff3fe608060405234801561000f575f80fd5b506004361061013d575f3560e01c80638da5cb5b116100b4578063be40c6c311610079578063be40c6c31461025f578063cf30901214610267578063e7f43c6814610274578063f2fde38b14610285578063f83d08ba14610298578063fb618e21146102a0575f80fd5b80638da5cb5b146102145780639dc29fac14610225578063a4e2d63414610238578063a69df4b51461024f578063b7df39b314610257575f80fd5b8063481c6a7511610105578063481c6a75146101a25780635271f840146101e157806352ebd04b146101e9578063570ca735146101f1578063715018a6146102045780637651bc921461020c575f80fd5b8063069a958914610141578063149c0b5c1461015f5780632c59f18814610171578063326cca851461017a57806340c10f191461018f575b5f80fd5b6101496102b3565b60405161015691906109c5565b60405180910390f35b6068545b604051908152602001610156565b61016360685481565b61018d610188366004610a97565b610343565b005b61018d61019d366004610aec565b6103a4565b6101c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610156565b610149610459565b6101496104e5565b6065546101c9906001600160a01b031681565b61018d6104f4565b610149610507565b6033546001600160a01b03166101c9565b61018d610233366004610aec565b610514565b60695460ff165b6040519015158152602001610156565b61018d610608565b61014961065c565b610149610669565b60695461023f9060ff1681565b6065546001600160a01b03166101c9565b61018d610293366004610b14565b610678565b61018d6106f1565b61018d6102ae366004610b34565b61076b565b6060606680546102c290610bb4565b80601f01602080910402602001604051908101604052809291908181526020018280546102ee90610bb4565b80156103395780601f1061031057610100808354040283529160200191610339565b820191905f5260205f20905b81548152906001019060200180831161031c57829003601f168201915b5050505050905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103945760405162461bcd60e51b815260040161038b90610bec565b60405180910390fd5b606a6103a08282610c79565b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ec5760405162461bcd60e51b815260040161038b90610bec565b60655482906001600160a01b0380831691161461041b5760405162461bcd60e51b815260040161038b90610d39565b60695460ff161561043e5760405162461bcd60e51b815260040161038b90610d89565b8160685f82825461044f9190610dc4565b9091555050505050565b606a805461046690610bb4565b80601f016020809104026020016040519081016040528092919081815260200182805461049290610bb4565b80156104dd5780601f106104b4576101008083540402835291602001916104dd565b820191905f5260205f20905b8154815290600101906020018083116104c057829003601f168201915b505050505081565b6060606a80546102c290610bb4565b6104fc6108c2565b6105055f61091c565b565b6067805461046690610bb4565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461055c5760405162461bcd60e51b815260040161038b90610bec565b60655482906001600160a01b0380831691161461058b5760405162461bcd60e51b815260040161038b90610d39565b60695460ff16156105ae5760405162461bcd60e51b815260040161038b90610d89565b8160685410156105f75760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161038b565b8160685f82825461044f9190610ddd565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106505760405162461bcd60e51b815260040161038b90610bec565b6069805460ff19169055565b6066805461046690610bb4565b6060606780546102c290610bb4565b6106806108c2565b6001600160a01b0381166106e55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161038b565b6106ee8161091c565b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107395760405162461bcd60e51b815260040161038b90610bec565b60695460ff161561075c5760405162461bcd60e51b815260040161038b90610d89565b6069805460ff19166001179055565b5f54610100900460ff161580801561078957505f54600160ff909116105b806107a25750303b1580156107a257505f5460ff166001145b6108055760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161038b565b5f805460ff191660011790558015610826575f805461ff0019166101001790555b61082e61096d565b6108378561091c565b606580546001600160a01b0319166001600160a01b038616179055606661085e8482610c79565b50606761086b8382610c79565b506069805460ff1916905580156108bb575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6033546001600160a01b031633146105055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038b565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff166109935760405162461bcd60e51b815260040161038b90610df0565b6105055f54610100900460ff166109bc5760405162461bcd60e51b815260040161038b90610df0565b6105053361091c565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610a1d575f80fd5b813567ffffffffffffffff80821115610a3857610a386109fa565b604051601f8301601f19908116603f01168101908282118183101715610a6057610a606109fa565b81604052838152866020858801011115610a78575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f60208284031215610aa7575f80fd5b813567ffffffffffffffff811115610abd575f80fd5b610ac984828501610a0e565b949350505050565b80356001600160a01b0381168114610ae7575f80fd5b919050565b5f8060408385031215610afd575f80fd5b610b0683610ad1565b946020939093013593505050565b5f60208284031215610b24575f80fd5b610b2d82610ad1565b9392505050565b5f805f8060808587031215610b47575f80fd5b610b5085610ad1565b9350610b5e60208601610ad1565b9250604085013567ffffffffffffffff80821115610b7a575f80fd5b610b8688838901610a0e565b93506060870135915080821115610b9b575f80fd5b50610ba887828801610a0e565b91505092959194509250565b600181811c90821680610bc857607f821691505b602082108103610be657634e487b7160e01b5f52602260045260245ffd5b50919050565b60208082526024908201527f4f6e6c79206d616e616765722063616e20706572666f726d20746869732061636040820152633a34b7b760e11b606082015260800190565b601f821115610c7457805f5260205f20601f840160051c81016020851015610c555750805b601f840160051c820191505b818110156108bb575f8155600101610c61565b505050565b815167ffffffffffffffff811115610c9357610c936109fa565b610ca781610ca18454610bb4565b84610c30565b602080601f831160018114610cda575f8415610cc35750858301515b5f19600386901b1c1916600185901b178555610d31565b5f85815260208120601f198616915b82811015610d0857888601518255948401946001909101908401610ce9565b5085821015610d2557878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60208082526030908201527f4f6e6c792064657369676e61746564206f70657261746f722063616e2070657260408201526f3337b936903a3434b99030b1ba34b7b760811b606082015260800190565b6020808252600d908201526c141bd9081a5cc81b1bd8dad959609a1b604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610dd757610dd7610db0565b92915050565b81810381811115610dd757610dd7610db0565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205b94e8e9f9eb95d9683926cd3775b4bf986fc298703af4855626d40f9b705fab64736f6c63430008190033a264697066735822122089114320d317cdce36c47069100ef29f189710c4d008b24eb3eddd9bd7372ce564736f6c63430008190033",
}

// PodManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use PodManagerMetaData.ABI instead.
var PodManagerABI = PodManagerMetaData.ABI

// PodManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PodManagerMetaData.Bin instead.
var PodManagerBin = PodManagerMetaData.Bin

// DeployPodManager deploys a new Ethereum contract, binding an instance of PodManager to it.
func DeployPodManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PodManager, error) {
	parsed, err := PodManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PodManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PodManager{PodManagerCaller: PodManagerCaller{contract: contract}, PodManagerTransactor: PodManagerTransactor{contract: contract}, PodManagerFilterer: PodManagerFilterer{contract: contract}}, nil
}

// PodManager is an auto generated Go binding around an Ethereum contract.
type PodManager struct {
	PodManagerCaller     // Read-only binding to the contract
	PodManagerTransactor // Write-only binding to the contract
	PodManagerFilterer   // Log filterer for contract events
}

// PodManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type PodManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PodManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PodManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PodManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PodManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PodManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PodManagerSession struct {
	Contract     *PodManager       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PodManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PodManagerCallerSession struct {
	Contract *PodManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// PodManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PodManagerTransactorSession struct {
	Contract     *PodManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PodManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type PodManagerRaw struct {
	Contract *PodManager // Generic contract binding to access the raw methods on
}

// PodManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PodManagerCallerRaw struct {
	Contract *PodManagerCaller // Generic read-only contract binding to access the raw methods on
}

// PodManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PodManagerTransactorRaw struct {
	Contract *PodManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPodManager creates a new instance of PodManager, bound to a specific deployed contract.
func NewPodManager(address common.Address, backend bind.ContractBackend) (*PodManager, error) {
	contract, err := bindPodManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PodManager{PodManagerCaller: PodManagerCaller{contract: contract}, PodManagerTransactor: PodManagerTransactor{contract: contract}, PodManagerFilterer: PodManagerFilterer{contract: contract}}, nil
}

// NewPodManagerCaller creates a new read-only instance of PodManager, bound to a specific deployed contract.
func NewPodManagerCaller(address common.Address, caller bind.ContractCaller) (*PodManagerCaller, error) {
	contract, err := bindPodManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PodManagerCaller{contract: contract}, nil
}

// NewPodManagerTransactor creates a new write-only instance of PodManager, bound to a specific deployed contract.
func NewPodManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*PodManagerTransactor, error) {
	contract, err := bindPodManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PodManagerTransactor{contract: contract}, nil
}

// NewPodManagerFilterer creates a new log filterer instance of PodManager, bound to a specific deployed contract.
func NewPodManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*PodManagerFilterer, error) {
	contract, err := bindPodManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PodManagerFilterer{contract: contract}, nil
}

// bindPodManager binds a generic wrapper to an already deployed contract.
func bindPodManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PodManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PodManager *PodManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PodManager.Contract.PodManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PodManager *PodManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PodManager.Contract.PodManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PodManager *PodManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PodManager.Contract.PodManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PodManager *PodManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PodManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PodManager *PodManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PodManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PodManager *PodManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PodManager.Contract.contract.Transact(opts, method, params...)
}

// GetAppRegistry is a free data retrieval call binding the contract method 0xb4ff8ff1.
//
// Solidity: function getAppRegistry() view returns(address)
func (_PodManager *PodManagerCaller) GetAppRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getAppRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAppRegistry is a free data retrieval call binding the contract method 0xb4ff8ff1.
//
// Solidity: function getAppRegistry() view returns(address)
func (_PodManager *PodManagerSession) GetAppRegistry() (common.Address, error) {
	return _PodManager.Contract.GetAppRegistry(&_PodManager.CallOpts)
}

// GetAppRegistry is a free data retrieval call binding the contract method 0xb4ff8ff1.
//
// Solidity: function getAppRegistry() view returns(address)
func (_PodManager *PodManagerCallerSession) GetAppRegistry() (common.Address, error) {
	return _PodManager.Contract.GetAppRegistry(&_PodManager.CallOpts)
}

// GetBitDSMRegistry is a free data retrieval call binding the contract method 0xb9dc6dae.
//
// Solidity: function getBitDSMRegistry() view returns(address)
func (_PodManager *PodManagerCaller) GetBitDSMRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getBitDSMRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBitDSMRegistry is a free data retrieval call binding the contract method 0xb9dc6dae.
//
// Solidity: function getBitDSMRegistry() view returns(address)
func (_PodManager *PodManagerSession) GetBitDSMRegistry() (common.Address, error) {
	return _PodManager.Contract.GetBitDSMRegistry(&_PodManager.CallOpts)
}

// GetBitDSMRegistry is a free data retrieval call binding the contract method 0xb9dc6dae.
//
// Solidity: function getBitDSMRegistry() view returns(address)
func (_PodManager *PodManagerCallerSession) GetBitDSMRegistry() (common.Address, error) {
	return _PodManager.Contract.GetBitDSMRegistry(&_PodManager.CallOpts)
}

// GetBitDSMServiceManager is a free data retrieval call binding the contract method 0x23e33cfd.
//
// Solidity: function getBitDSMServiceManager() view returns(address)
func (_PodManager *PodManagerCaller) GetBitDSMServiceManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getBitDSMServiceManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetBitDSMServiceManager is a free data retrieval call binding the contract method 0x23e33cfd.
//
// Solidity: function getBitDSMServiceManager() view returns(address)
func (_PodManager *PodManagerSession) GetBitDSMServiceManager() (common.Address, error) {
	return _PodManager.Contract.GetBitDSMServiceManager(&_PodManager.CallOpts)
}

// GetBitDSMServiceManager is a free data retrieval call binding the contract method 0x23e33cfd.
//
// Solidity: function getBitDSMServiceManager() view returns(address)
func (_PodManager *PodManagerCallerSession) GetBitDSMServiceManager() (common.Address, error) {
	return _PodManager.Contract.GetBitDSMServiceManager(&_PodManager.CallOpts)
}

// GetBitcoinDepositRequest is a free data retrieval call binding the contract method 0x85974473.
//
// Solidity: function getBitcoinDepositRequest(address pod) view returns((bytes32,uint256,bool))
func (_PodManager *PodManagerCaller) GetBitcoinDepositRequest(opts *bind.CallOpts, pod common.Address) (IBitcoinPodManagerBitcoinDepositRequest, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getBitcoinDepositRequest", pod)

	if err != nil {
		return *new(IBitcoinPodManagerBitcoinDepositRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(IBitcoinPodManagerBitcoinDepositRequest)).(*IBitcoinPodManagerBitcoinDepositRequest)

	return out0, err

}

// GetBitcoinDepositRequest is a free data retrieval call binding the contract method 0x85974473.
//
// Solidity: function getBitcoinDepositRequest(address pod) view returns((bytes32,uint256,bool))
func (_PodManager *PodManagerSession) GetBitcoinDepositRequest(pod common.Address) (IBitcoinPodManagerBitcoinDepositRequest, error) {
	return _PodManager.Contract.GetBitcoinDepositRequest(&_PodManager.CallOpts, pod)
}

// GetBitcoinDepositRequest is a free data retrieval call binding the contract method 0x85974473.
//
// Solidity: function getBitcoinDepositRequest(address pod) view returns((bytes32,uint256,bool))
func (_PodManager *PodManagerCallerSession) GetBitcoinDepositRequest(pod common.Address) (IBitcoinPodManagerBitcoinDepositRequest, error) {
	return _PodManager.Contract.GetBitcoinDepositRequest(&_PodManager.CallOpts, pod)
}

// GetBitcoinWithdrawalAddress is a free data retrieval call binding the contract method 0xc07eea48.
//
// Solidity: function getBitcoinWithdrawalAddress(address pod) view returns(string)
func (_PodManager *PodManagerCaller) GetBitcoinWithdrawalAddress(opts *bind.CallOpts, pod common.Address) (string, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getBitcoinWithdrawalAddress", pod)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetBitcoinWithdrawalAddress is a free data retrieval call binding the contract method 0xc07eea48.
//
// Solidity: function getBitcoinWithdrawalAddress(address pod) view returns(string)
func (_PodManager *PodManagerSession) GetBitcoinWithdrawalAddress(pod common.Address) (string, error) {
	return _PodManager.Contract.GetBitcoinWithdrawalAddress(&_PodManager.CallOpts, pod)
}

// GetBitcoinWithdrawalAddress is a free data retrieval call binding the contract method 0xc07eea48.
//
// Solidity: function getBitcoinWithdrawalAddress(address pod) view returns(string)
func (_PodManager *PodManagerCallerSession) GetBitcoinWithdrawalAddress(pod common.Address) (string, error) {
	return _PodManager.Contract.GetBitcoinWithdrawalAddress(&_PodManager.CallOpts, pod)
}

// GetPodApp is a free data retrieval call binding the contract method 0x0f2daf30.
//
// Solidity: function getPodApp(address pod) view returns(address)
func (_PodManager *PodManagerCaller) GetPodApp(opts *bind.CallOpts, pod common.Address) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getPodApp", pod)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPodApp is a free data retrieval call binding the contract method 0x0f2daf30.
//
// Solidity: function getPodApp(address pod) view returns(address)
func (_PodManager *PodManagerSession) GetPodApp(pod common.Address) (common.Address, error) {
	return _PodManager.Contract.GetPodApp(&_PodManager.CallOpts, pod)
}

// GetPodApp is a free data retrieval call binding the contract method 0x0f2daf30.
//
// Solidity: function getPodApp(address pod) view returns(address)
func (_PodManager *PodManagerCallerSession) GetPodApp(pod common.Address) (common.Address, error) {
	return _PodManager.Contract.GetPodApp(&_PodManager.CallOpts, pod)
}

// GetTotalTVL is a free data retrieval call binding the contract method 0x0c021ae5.
//
// Solidity: function getTotalTVL() view returns(uint256)
func (_PodManager *PodManagerCaller) GetTotalTVL(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getTotalTVL")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalTVL is a free data retrieval call binding the contract method 0x0c021ae5.
//
// Solidity: function getTotalTVL() view returns(uint256)
func (_PodManager *PodManagerSession) GetTotalTVL() (*big.Int, error) {
	return _PodManager.Contract.GetTotalTVL(&_PodManager.CallOpts)
}

// GetTotalTVL is a free data retrieval call binding the contract method 0x0c021ae5.
//
// Solidity: function getTotalTVL() view returns(uint256)
func (_PodManager *PodManagerCallerSession) GetTotalTVL() (*big.Int, error) {
	return _PodManager.Contract.GetTotalTVL(&_PodManager.CallOpts)
}

// GetUserPod is a free data retrieval call binding the contract method 0xda600a8a.
//
// Solidity: function getUserPod(address user) view returns(address)
func (_PodManager *PodManagerCaller) GetUserPod(opts *bind.CallOpts, user common.Address) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getUserPod", user)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetUserPod is a free data retrieval call binding the contract method 0xda600a8a.
//
// Solidity: function getUserPod(address user) view returns(address)
func (_PodManager *PodManagerSession) GetUserPod(user common.Address) (common.Address, error) {
	return _PodManager.Contract.GetUserPod(&_PodManager.CallOpts, user)
}

// GetUserPod is a free data retrieval call binding the contract method 0xda600a8a.
//
// Solidity: function getUserPod(address user) view returns(address)
func (_PodManager *PodManagerCallerSession) GetUserPod(user common.Address) (common.Address, error) {
	return _PodManager.Contract.GetUserPod(&_PodManager.CallOpts, user)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PodManager *PodManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PodManager *PodManagerSession) Owner() (common.Address, error) {
	return _PodManager.Contract.Owner(&_PodManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PodManager *PodManagerCallerSession) Owner() (common.Address, error) {
	return _PodManager.Contract.Owner(&_PodManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PodManager *PodManagerCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PodManager *PodManagerSession) Paused() (bool, error) {
	return _PodManager.Contract.Paused(&_PodManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PodManager *PodManagerCallerSession) Paused() (bool, error) {
	return _PodManager.Contract.Paused(&_PodManager.CallOpts)
}

// ConfirmBitcoinDeposit is a paid mutator transaction binding the contract method 0x397ee69b.
//
// Solidity: function confirmBitcoinDeposit(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerTransactor) ConfirmBitcoinDeposit(opts *bind.TransactOpts, pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "confirmBitcoinDeposit", pod, transactionId, amount)
}

// ConfirmBitcoinDeposit is a paid mutator transaction binding the contract method 0x397ee69b.
//
// Solidity: function confirmBitcoinDeposit(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerSession) ConfirmBitcoinDeposit(pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.Contract.ConfirmBitcoinDeposit(&_PodManager.TransactOpts, pod, transactionId, amount)
}

// ConfirmBitcoinDeposit is a paid mutator transaction binding the contract method 0x397ee69b.
//
// Solidity: function confirmBitcoinDeposit(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerTransactorSession) ConfirmBitcoinDeposit(pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.Contract.ConfirmBitcoinDeposit(&_PodManager.TransactOpts, pod, transactionId, amount)
}

// CreatePod is a paid mutator transaction binding the contract method 0xfe64d401.
//
// Solidity: function createPod(address operator, bytes btcAddress) returns(address)
func (_PodManager *PodManagerTransactor) CreatePod(opts *bind.TransactOpts, operator common.Address, btcAddress []byte) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "createPod", operator, btcAddress)
}

// CreatePod is a paid mutator transaction binding the contract method 0xfe64d401.
//
// Solidity: function createPod(address operator, bytes btcAddress) returns(address)
func (_PodManager *PodManagerSession) CreatePod(operator common.Address, btcAddress []byte) (*types.Transaction, error) {
	return _PodManager.Contract.CreatePod(&_PodManager.TransactOpts, operator, btcAddress)
}

// CreatePod is a paid mutator transaction binding the contract method 0xfe64d401.
//
// Solidity: function createPod(address operator, bytes btcAddress) returns(address)
func (_PodManager *PodManagerTransactorSession) CreatePod(operator common.Address, btcAddress []byte) (*types.Transaction, error) {
	return _PodManager.Contract.CreatePod(&_PodManager.TransactOpts, operator, btcAddress)
}

// DelegatePod is a paid mutator transaction binding the contract method 0xf99b67c9.
//
// Solidity: function delegatePod(address pod, address appContract) returns()
func (_PodManager *PodManagerTransactor) DelegatePod(opts *bind.TransactOpts, pod common.Address, appContract common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "delegatePod", pod, appContract)
}

// DelegatePod is a paid mutator transaction binding the contract method 0xf99b67c9.
//
// Solidity: function delegatePod(address pod, address appContract) returns()
func (_PodManager *PodManagerSession) DelegatePod(pod common.Address, appContract common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.DelegatePod(&_PodManager.TransactOpts, pod, appContract)
}

// DelegatePod is a paid mutator transaction binding the contract method 0xf99b67c9.
//
// Solidity: function delegatePod(address pod, address appContract) returns()
func (_PodManager *PodManagerTransactorSession) DelegatePod(pod common.Address, appContract common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.DelegatePod(&_PodManager.TransactOpts, pod, appContract)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address appRegistry_, address bitDSMRegistry_, address bitDSMServiceManager_) returns()
func (_PodManager *PodManagerTransactor) Initialize(opts *bind.TransactOpts, appRegistry_ common.Address, bitDSMRegistry_ common.Address, bitDSMServiceManager_ common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "initialize", appRegistry_, bitDSMRegistry_, bitDSMServiceManager_)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address appRegistry_, address bitDSMRegistry_, address bitDSMServiceManager_) returns()
func (_PodManager *PodManagerSession) Initialize(appRegistry_ common.Address, bitDSMRegistry_ common.Address, bitDSMServiceManager_ common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.Initialize(&_PodManager.TransactOpts, appRegistry_, bitDSMRegistry_, bitDSMServiceManager_)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address appRegistry_, address bitDSMRegistry_, address bitDSMServiceManager_) returns()
func (_PodManager *PodManagerTransactorSession) Initialize(appRegistry_ common.Address, bitDSMRegistry_ common.Address, bitDSMServiceManager_ common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.Initialize(&_PodManager.TransactOpts, appRegistry_, bitDSMRegistry_, bitDSMServiceManager_)
}

// LockPod is a paid mutator transaction binding the contract method 0x221d3300.
//
// Solidity: function lockPod(address pod) returns()
func (_PodManager *PodManagerTransactor) LockPod(opts *bind.TransactOpts, pod common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "lockPod", pod)
}

// LockPod is a paid mutator transaction binding the contract method 0x221d3300.
//
// Solidity: function lockPod(address pod) returns()
func (_PodManager *PodManagerSession) LockPod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.LockPod(&_PodManager.TransactOpts, pod)
}

// LockPod is a paid mutator transaction binding the contract method 0x221d3300.
//
// Solidity: function lockPod(address pod) returns()
func (_PodManager *PodManagerTransactorSession) LockPod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.LockPod(&_PodManager.TransactOpts, pod)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_PodManager *PodManagerTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_PodManager *PodManagerSession) Pause() (*types.Transaction, error) {
	return _PodManager.Contract.Pause(&_PodManager.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_PodManager *PodManagerTransactorSession) Pause() (*types.Transaction, error) {
	return _PodManager.Contract.Pause(&_PodManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PodManager *PodManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PodManager *PodManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _PodManager.Contract.RenounceOwnership(&_PodManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PodManager *PodManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PodManager.Contract.RenounceOwnership(&_PodManager.TransactOpts)
}

// SetSignedBitcoinWithdrawTransactionPod is a paid mutator transaction binding the contract method 0xd5062c77.
//
// Solidity: function setSignedBitcoinWithdrawTransactionPod(address pod, bytes signedBitcoinWithdrawTransaction) returns()
func (_PodManager *PodManagerTransactor) SetSignedBitcoinWithdrawTransactionPod(opts *bind.TransactOpts, pod common.Address, signedBitcoinWithdrawTransaction []byte) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "setSignedBitcoinWithdrawTransactionPod", pod, signedBitcoinWithdrawTransaction)
}

// SetSignedBitcoinWithdrawTransactionPod is a paid mutator transaction binding the contract method 0xd5062c77.
//
// Solidity: function setSignedBitcoinWithdrawTransactionPod(address pod, bytes signedBitcoinWithdrawTransaction) returns()
func (_PodManager *PodManagerSession) SetSignedBitcoinWithdrawTransactionPod(pod common.Address, signedBitcoinWithdrawTransaction []byte) (*types.Transaction, error) {
	return _PodManager.Contract.SetSignedBitcoinWithdrawTransactionPod(&_PodManager.TransactOpts, pod, signedBitcoinWithdrawTransaction)
}

// SetSignedBitcoinWithdrawTransactionPod is a paid mutator transaction binding the contract method 0xd5062c77.
//
// Solidity: function setSignedBitcoinWithdrawTransactionPod(address pod, bytes signedBitcoinWithdrawTransaction) returns()
func (_PodManager *PodManagerTransactorSession) SetSignedBitcoinWithdrawTransactionPod(pod common.Address, signedBitcoinWithdrawTransaction []byte) (*types.Transaction, error) {
	return _PodManager.Contract.SetSignedBitcoinWithdrawTransactionPod(&_PodManager.TransactOpts, pod, signedBitcoinWithdrawTransaction)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PodManager *PodManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PodManager *PodManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.TransferOwnership(&_PodManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PodManager *PodManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.TransferOwnership(&_PodManager.TransactOpts, newOwner)
}

// UndelegatePod is a paid mutator transaction binding the contract method 0xed1dfe0b.
//
// Solidity: function undelegatePod(address pod) returns()
func (_PodManager *PodManagerTransactor) UndelegatePod(opts *bind.TransactOpts, pod common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "undelegatePod", pod)
}

// UndelegatePod is a paid mutator transaction binding the contract method 0xed1dfe0b.
//
// Solidity: function undelegatePod(address pod) returns()
func (_PodManager *PodManagerSession) UndelegatePod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.UndelegatePod(&_PodManager.TransactOpts, pod)
}

// UndelegatePod is a paid mutator transaction binding the contract method 0xed1dfe0b.
//
// Solidity: function undelegatePod(address pod) returns()
func (_PodManager *PodManagerTransactorSession) UndelegatePod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.UndelegatePod(&_PodManager.TransactOpts, pod)
}

// UnlockPod is a paid mutator transaction binding the contract method 0x7de2970d.
//
// Solidity: function unlockPod(address pod) returns()
func (_PodManager *PodManagerTransactor) UnlockPod(opts *bind.TransactOpts, pod common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "unlockPod", pod)
}

// UnlockPod is a paid mutator transaction binding the contract method 0x7de2970d.
//
// Solidity: function unlockPod(address pod) returns()
func (_PodManager *PodManagerSession) UnlockPod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.UnlockPod(&_PodManager.TransactOpts, pod)
}

// UnlockPod is a paid mutator transaction binding the contract method 0x7de2970d.
//
// Solidity: function unlockPod(address pod) returns()
func (_PodManager *PodManagerTransactorSession) UnlockPod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.UnlockPod(&_PodManager.TransactOpts, pod)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_PodManager *PodManagerTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_PodManager *PodManagerSession) Unpause() (*types.Transaction, error) {
	return _PodManager.Contract.Unpause(&_PodManager.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_PodManager *PodManagerTransactorSession) Unpause() (*types.Transaction, error) {
	return _PodManager.Contract.Unpause(&_PodManager.TransactOpts)
}

// VerifyBitcoinDepositRequest is a paid mutator transaction binding the contract method 0x5b674bc9.
//
// Solidity: function verifyBitcoinDepositRequest(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerTransactor) VerifyBitcoinDepositRequest(opts *bind.TransactOpts, pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "verifyBitcoinDepositRequest", pod, transactionId, amount)
}

// VerifyBitcoinDepositRequest is a paid mutator transaction binding the contract method 0x5b674bc9.
//
// Solidity: function verifyBitcoinDepositRequest(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerSession) VerifyBitcoinDepositRequest(pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.Contract.VerifyBitcoinDepositRequest(&_PodManager.TransactOpts, pod, transactionId, amount)
}

// VerifyBitcoinDepositRequest is a paid mutator transaction binding the contract method 0x5b674bc9.
//
// Solidity: function verifyBitcoinDepositRequest(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerTransactorSession) VerifyBitcoinDepositRequest(pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.Contract.VerifyBitcoinDepositRequest(&_PodManager.TransactOpts, pod, transactionId, amount)
}

// WithdrawBitcoinAsTokens is a paid mutator transaction binding the contract method 0xd475ab03.
//
// Solidity: function withdrawBitcoinAsTokens(address pod) returns()
func (_PodManager *PodManagerTransactor) WithdrawBitcoinAsTokens(opts *bind.TransactOpts, pod common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "withdrawBitcoinAsTokens", pod)
}

// WithdrawBitcoinAsTokens is a paid mutator transaction binding the contract method 0xd475ab03.
//
// Solidity: function withdrawBitcoinAsTokens(address pod) returns()
func (_PodManager *PodManagerSession) WithdrawBitcoinAsTokens(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinAsTokens(&_PodManager.TransactOpts, pod)
}

// WithdrawBitcoinAsTokens is a paid mutator transaction binding the contract method 0xd475ab03.
//
// Solidity: function withdrawBitcoinAsTokens(address pod) returns()
func (_PodManager *PodManagerTransactorSession) WithdrawBitcoinAsTokens(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinAsTokens(&_PodManager.TransactOpts, pod)
}

// WithdrawBitcoinCompleteTxRequest is a paid mutator transaction binding the contract method 0x2b6bbf75.
//
// Solidity: function withdrawBitcoinCompleteTxRequest(address pod, bytes preSignedWithdrawTransaction, string withdrawAddress) returns()
func (_PodManager *PodManagerTransactor) WithdrawBitcoinCompleteTxRequest(opts *bind.TransactOpts, pod common.Address, preSignedWithdrawTransaction []byte, withdrawAddress string) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "withdrawBitcoinCompleteTxRequest", pod, preSignedWithdrawTransaction, withdrawAddress)
}

// WithdrawBitcoinCompleteTxRequest is a paid mutator transaction binding the contract method 0x2b6bbf75.
//
// Solidity: function withdrawBitcoinCompleteTxRequest(address pod, bytes preSignedWithdrawTransaction, string withdrawAddress) returns()
func (_PodManager *PodManagerSession) WithdrawBitcoinCompleteTxRequest(pod common.Address, preSignedWithdrawTransaction []byte, withdrawAddress string) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinCompleteTxRequest(&_PodManager.TransactOpts, pod, preSignedWithdrawTransaction, withdrawAddress)
}

// WithdrawBitcoinCompleteTxRequest is a paid mutator transaction binding the contract method 0x2b6bbf75.
//
// Solidity: function withdrawBitcoinCompleteTxRequest(address pod, bytes preSignedWithdrawTransaction, string withdrawAddress) returns()
func (_PodManager *PodManagerTransactorSession) WithdrawBitcoinCompleteTxRequest(pod common.Address, preSignedWithdrawTransaction []byte, withdrawAddress string) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinCompleteTxRequest(&_PodManager.TransactOpts, pod, preSignedWithdrawTransaction, withdrawAddress)
}

// WithdrawBitcoinPSBTRequest is a paid mutator transaction binding the contract method 0x7104c3df.
//
// Solidity: function withdrawBitcoinPSBTRequest(address pod, string withdrawAddress) returns()
func (_PodManager *PodManagerTransactor) WithdrawBitcoinPSBTRequest(opts *bind.TransactOpts, pod common.Address, withdrawAddress string) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "withdrawBitcoinPSBTRequest", pod, withdrawAddress)
}

// WithdrawBitcoinPSBTRequest is a paid mutator transaction binding the contract method 0x7104c3df.
//
// Solidity: function withdrawBitcoinPSBTRequest(address pod, string withdrawAddress) returns()
func (_PodManager *PodManagerSession) WithdrawBitcoinPSBTRequest(pod common.Address, withdrawAddress string) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinPSBTRequest(&_PodManager.TransactOpts, pod, withdrawAddress)
}

// WithdrawBitcoinPSBTRequest is a paid mutator transaction binding the contract method 0x7104c3df.
//
// Solidity: function withdrawBitcoinPSBTRequest(address pod, string withdrawAddress) returns()
func (_PodManager *PodManagerTransactorSession) WithdrawBitcoinPSBTRequest(pod common.Address, withdrawAddress string) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinPSBTRequest(&_PodManager.TransactOpts, pod, withdrawAddress)
}

// PodManagerBitcoinBurnedIterator is returned from FilterBitcoinBurned and is used to iterate over the raw logs and unpacked data for BitcoinBurned events raised by the PodManager contract.
type PodManagerBitcoinBurnedIterator struct {
	Event *PodManagerBitcoinBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinBurned represents a BitcoinBurned event raised by the PodManager contract.
type PodManagerBitcoinBurned struct {
	Pod    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBitcoinBurned is a free log retrieval operation binding the contract event 0xab3f63d5d40e3fa7b8c0bece27a98227873fd63e10d0da6e8fcefc6e510d3f1d.
//
// Solidity: event BitcoinBurned(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) FilterBitcoinBurned(opts *bind.FilterOpts, pod []common.Address) (*PodManagerBitcoinBurnedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinBurned", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinBurnedIterator{contract: _PodManager.contract, event: "BitcoinBurned", logs: logs, sub: sub}, nil
}

// WatchBitcoinBurned is a free log subscription operation binding the contract event 0xab3f63d5d40e3fa7b8c0bece27a98227873fd63e10d0da6e8fcefc6e510d3f1d.
//
// Solidity: event BitcoinBurned(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) WatchBitcoinBurned(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinBurned, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinBurned", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinBurned)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinBurned is a log parse operation binding the contract event 0xab3f63d5d40e3fa7b8c0bece27a98227873fd63e10d0da6e8fcefc6e510d3f1d.
//
// Solidity: event BitcoinBurned(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) ParseBitcoinBurned(log types.Log) (*PodManagerBitcoinBurned, error) {
	event := new(PodManagerBitcoinBurned)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinDepositConfirmedIterator is returned from FilterBitcoinDepositConfirmed and is used to iterate over the raw logs and unpacked data for BitcoinDepositConfirmed events raised by the PodManager contract.
type PodManagerBitcoinDepositConfirmedIterator struct {
	Event *PodManagerBitcoinDepositConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinDepositConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinDepositConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinDepositConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinDepositConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinDepositConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinDepositConfirmed represents a BitcoinDepositConfirmed event raised by the PodManager contract.
type PodManagerBitcoinDepositConfirmed struct {
	Pod    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBitcoinDepositConfirmed is a free log retrieval operation binding the contract event 0xcd774d9acd3dba4b6906137578fb72af62a91a12e8943e076232cb691cc96cef.
//
// Solidity: event BitcoinDepositConfirmed(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) FilterBitcoinDepositConfirmed(opts *bind.FilterOpts, pod []common.Address) (*PodManagerBitcoinDepositConfirmedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinDepositConfirmed", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinDepositConfirmedIterator{contract: _PodManager.contract, event: "BitcoinDepositConfirmed", logs: logs, sub: sub}, nil
}

// WatchBitcoinDepositConfirmed is a free log subscription operation binding the contract event 0xcd774d9acd3dba4b6906137578fb72af62a91a12e8943e076232cb691cc96cef.
//
// Solidity: event BitcoinDepositConfirmed(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) WatchBitcoinDepositConfirmed(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinDepositConfirmed, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinDepositConfirmed", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinDepositConfirmed)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinDepositConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinDepositConfirmed is a log parse operation binding the contract event 0xcd774d9acd3dba4b6906137578fb72af62a91a12e8943e076232cb691cc96cef.
//
// Solidity: event BitcoinDepositConfirmed(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) ParseBitcoinDepositConfirmed(log types.Log) (*PodManagerBitcoinDepositConfirmed, error) {
	event := new(PodManagerBitcoinDepositConfirmed)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinDepositConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinMintedIterator is returned from FilterBitcoinMinted and is used to iterate over the raw logs and unpacked data for BitcoinMinted events raised by the PodManager contract.
type PodManagerBitcoinMintedIterator struct {
	Event *PodManagerBitcoinMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinMinted represents a BitcoinMinted event raised by the PodManager contract.
type PodManagerBitcoinMinted struct {
	Pod    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBitcoinMinted is a free log retrieval operation binding the contract event 0x5aca106588d0e1ebb9128b3f4b196bc949a208e38d3db913363353402fe73bd3.
//
// Solidity: event BitcoinMinted(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) FilterBitcoinMinted(opts *bind.FilterOpts, pod []common.Address) (*PodManagerBitcoinMintedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinMinted", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinMintedIterator{contract: _PodManager.contract, event: "BitcoinMinted", logs: logs, sub: sub}, nil
}

// WatchBitcoinMinted is a free log subscription operation binding the contract event 0x5aca106588d0e1ebb9128b3f4b196bc949a208e38d3db913363353402fe73bd3.
//
// Solidity: event BitcoinMinted(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) WatchBitcoinMinted(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinMinted, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinMinted", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinMinted)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinMinted is a log parse operation binding the contract event 0x5aca106588d0e1ebb9128b3f4b196bc949a208e38d3db913363353402fe73bd3.
//
// Solidity: event BitcoinMinted(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) ParseBitcoinMinted(log types.Log) (*PodManagerBitcoinMinted, error) {
	event := new(PodManagerBitcoinMinted)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinWithdrawalCompleteTxRequestIterator is returned from FilterBitcoinWithdrawalCompleteTxRequest and is used to iterate over the raw logs and unpacked data for BitcoinWithdrawalCompleteTxRequest events raised by the PodManager contract.
type PodManagerBitcoinWithdrawalCompleteTxRequestIterator struct {
	Event *PodManagerBitcoinWithdrawalCompleteTxRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinWithdrawalCompleteTxRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinWithdrawalCompleteTxRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinWithdrawalCompleteTxRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinWithdrawalCompleteTxRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinWithdrawalCompleteTxRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinWithdrawalCompleteTxRequest represents a BitcoinWithdrawalCompleteTxRequest event raised by the PodManager contract.
type PodManagerBitcoinWithdrawalCompleteTxRequest struct {
	Pod                common.Address
	Operator           common.Address
	PreSignedBitcoinTx []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterBitcoinWithdrawalCompleteTxRequest is a free log retrieval operation binding the contract event 0xef73d097c5517b2b5d2dbffb17b0f948b5d7606055610ed1cad57aaa439e94f6.
//
// Solidity: event BitcoinWithdrawalCompleteTxRequest(address indexed pod, address indexed operator, bytes preSignedBitcoinTx)
func (_PodManager *PodManagerFilterer) FilterBitcoinWithdrawalCompleteTxRequest(opts *bind.FilterOpts, pod []common.Address, operator []common.Address) (*PodManagerBitcoinWithdrawalCompleteTxRequestIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinWithdrawalCompleteTxRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinWithdrawalCompleteTxRequestIterator{contract: _PodManager.contract, event: "BitcoinWithdrawalCompleteTxRequest", logs: logs, sub: sub}, nil
}

// WatchBitcoinWithdrawalCompleteTxRequest is a free log subscription operation binding the contract event 0xef73d097c5517b2b5d2dbffb17b0f948b5d7606055610ed1cad57aaa439e94f6.
//
// Solidity: event BitcoinWithdrawalCompleteTxRequest(address indexed pod, address indexed operator, bytes preSignedBitcoinTx)
func (_PodManager *PodManagerFilterer) WatchBitcoinWithdrawalCompleteTxRequest(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinWithdrawalCompleteTxRequest, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinWithdrawalCompleteTxRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinWithdrawalCompleteTxRequest)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawalCompleteTxRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinWithdrawalCompleteTxRequest is a log parse operation binding the contract event 0xef73d097c5517b2b5d2dbffb17b0f948b5d7606055610ed1cad57aaa439e94f6.
//
// Solidity: event BitcoinWithdrawalCompleteTxRequest(address indexed pod, address indexed operator, bytes preSignedBitcoinTx)
func (_PodManager *PodManagerFilterer) ParseBitcoinWithdrawalCompleteTxRequest(log types.Log) (*PodManagerBitcoinWithdrawalCompleteTxRequest, error) {
	event := new(PodManagerBitcoinWithdrawalCompleteTxRequest)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawalCompleteTxRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinWithdrawalPSBTRequestIterator is returned from FilterBitcoinWithdrawalPSBTRequest and is used to iterate over the raw logs and unpacked data for BitcoinWithdrawalPSBTRequest events raised by the PodManager contract.
type PodManagerBitcoinWithdrawalPSBTRequestIterator struct {
	Event *PodManagerBitcoinWithdrawalPSBTRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinWithdrawalPSBTRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinWithdrawalPSBTRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinWithdrawalPSBTRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinWithdrawalPSBTRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinWithdrawalPSBTRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinWithdrawalPSBTRequest represents a BitcoinWithdrawalPSBTRequest event raised by the PodManager contract.
type PodManagerBitcoinWithdrawalPSBTRequest struct {
	Pod             common.Address
	Operator        common.Address
	WithdrawAddress string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBitcoinWithdrawalPSBTRequest is a free log retrieval operation binding the contract event 0xe6142438106d9245d23d95a8dcc0141c9e63e96b0e2a9655b213ca6bd50af011.
//
// Solidity: event BitcoinWithdrawalPSBTRequest(address indexed pod, address indexed operator, string withdrawAddress)
func (_PodManager *PodManagerFilterer) FilterBitcoinWithdrawalPSBTRequest(opts *bind.FilterOpts, pod []common.Address, operator []common.Address) (*PodManagerBitcoinWithdrawalPSBTRequestIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinWithdrawalPSBTRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinWithdrawalPSBTRequestIterator{contract: _PodManager.contract, event: "BitcoinWithdrawalPSBTRequest", logs: logs, sub: sub}, nil
}

// WatchBitcoinWithdrawalPSBTRequest is a free log subscription operation binding the contract event 0xe6142438106d9245d23d95a8dcc0141c9e63e96b0e2a9655b213ca6bd50af011.
//
// Solidity: event BitcoinWithdrawalPSBTRequest(address indexed pod, address indexed operator, string withdrawAddress)
func (_PodManager *PodManagerFilterer) WatchBitcoinWithdrawalPSBTRequest(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinWithdrawalPSBTRequest, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinWithdrawalPSBTRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinWithdrawalPSBTRequest)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawalPSBTRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinWithdrawalPSBTRequest is a log parse operation binding the contract event 0xe6142438106d9245d23d95a8dcc0141c9e63e96b0e2a9655b213ca6bd50af011.
//
// Solidity: event BitcoinWithdrawalPSBTRequest(address indexed pod, address indexed operator, string withdrawAddress)
func (_PodManager *PodManagerFilterer) ParseBitcoinWithdrawalPSBTRequest(log types.Log) (*PodManagerBitcoinWithdrawalPSBTRequest, error) {
	event := new(PodManagerBitcoinWithdrawalPSBTRequest)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawalPSBTRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinWithdrawnFromPodIterator is returned from FilterBitcoinWithdrawnFromPod and is used to iterate over the raw logs and unpacked data for BitcoinWithdrawnFromPod events raised by the PodManager contract.
type PodManagerBitcoinWithdrawnFromPodIterator struct {
	Event *PodManagerBitcoinWithdrawnFromPod // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinWithdrawnFromPodIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinWithdrawnFromPod)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinWithdrawnFromPod)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinWithdrawnFromPodIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinWithdrawnFromPodIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinWithdrawnFromPod represents a BitcoinWithdrawnFromPod event raised by the PodManager contract.
type PodManagerBitcoinWithdrawnFromPod struct {
	Pod             common.Address
	WithdrawAddress string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBitcoinWithdrawnFromPod is a free log retrieval operation binding the contract event 0x6dd3dd303209228b16cce56d4dfeb8116c23e6b9374927841bb4557b1e686643.
//
// Solidity: event BitcoinWithdrawnFromPod(address indexed pod, string withdrawAddress)
func (_PodManager *PodManagerFilterer) FilterBitcoinWithdrawnFromPod(opts *bind.FilterOpts, pod []common.Address) (*PodManagerBitcoinWithdrawnFromPodIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinWithdrawnFromPod", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinWithdrawnFromPodIterator{contract: _PodManager.contract, event: "BitcoinWithdrawnFromPod", logs: logs, sub: sub}, nil
}

// WatchBitcoinWithdrawnFromPod is a free log subscription operation binding the contract event 0x6dd3dd303209228b16cce56d4dfeb8116c23e6b9374927841bb4557b1e686643.
//
// Solidity: event BitcoinWithdrawnFromPod(address indexed pod, string withdrawAddress)
func (_PodManager *PodManagerFilterer) WatchBitcoinWithdrawnFromPod(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinWithdrawnFromPod, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinWithdrawnFromPod", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinWithdrawnFromPod)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawnFromPod", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinWithdrawnFromPod is a log parse operation binding the contract event 0x6dd3dd303209228b16cce56d4dfeb8116c23e6b9374927841bb4557b1e686643.
//
// Solidity: event BitcoinWithdrawnFromPod(address indexed pod, string withdrawAddress)
func (_PodManager *PodManagerFilterer) ParseBitcoinWithdrawnFromPod(log types.Log) (*PodManagerBitcoinWithdrawnFromPod, error) {
	event := new(PodManagerBitcoinWithdrawnFromPod)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawnFromPod", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PodManager contract.
type PodManagerInitializedIterator struct {
	Event *PodManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerInitialized represents a Initialized event raised by the PodManager contract.
type PodManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PodManager *PodManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*PodManagerInitializedIterator, error) {

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PodManagerInitializedIterator{contract: _PodManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PodManager *PodManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PodManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerInitialized)
				if err := _PodManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PodManager *PodManagerFilterer) ParseInitialized(log types.Log) (*PodManagerInitialized, error) {
	event := new(PodManagerInitialized)
	if err := _PodManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PodManager contract.
type PodManagerOwnershipTransferredIterator struct {
	Event *PodManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerOwnershipTransferred represents a OwnershipTransferred event raised by the PodManager contract.
type PodManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PodManager *PodManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PodManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerOwnershipTransferredIterator{contract: _PodManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PodManager *PodManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PodManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerOwnershipTransferred)
				if err := _PodManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PodManager *PodManagerFilterer) ParseOwnershipTransferred(log types.Log) (*PodManagerOwnershipTransferred, error) {
	event := new(PodManagerOwnershipTransferred)
	if err := _PodManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the PodManager contract.
type PodManagerPausedIterator struct {
	Event *PodManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerPaused represents a Paused event raised by the PodManager contract.
type PodManagerPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PodManager *PodManagerFilterer) FilterPaused(opts *bind.FilterOpts) (*PodManagerPausedIterator, error) {

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &PodManagerPausedIterator{contract: _PodManager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PodManager *PodManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *PodManagerPaused) (event.Subscription, error) {

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerPaused)
				if err := _PodManager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PodManager *PodManagerFilterer) ParsePaused(log types.Log) (*PodManagerPaused, error) {
	event := new(PodManagerPaused)
	if err := _PodManager.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerPodCreatedIterator is returned from FilterPodCreated and is used to iterate over the raw logs and unpacked data for PodCreated events raised by the PodManager contract.
type PodManagerPodCreatedIterator struct {
	Event *PodManagerPodCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerPodCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerPodCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerPodCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerPodCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerPodCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerPodCreated represents a PodCreated event raised by the PodManager contract.
type PodManagerPodCreated struct {
	User     common.Address
	Pod      common.Address
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPodCreated is a free log retrieval operation binding the contract event 0x9bec3cb55fcd181aaece51ed577f8a95b847c8af90535a81a7fa7d1c20138ef9.
//
// Solidity: event PodCreated(address indexed user, address indexed pod, address indexed operator)
func (_PodManager *PodManagerFilterer) FilterPodCreated(opts *bind.FilterOpts, user []common.Address, pod []common.Address, operator []common.Address) (*PodManagerPodCreatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "PodCreated", userRule, podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerPodCreatedIterator{contract: _PodManager.contract, event: "PodCreated", logs: logs, sub: sub}, nil
}

// WatchPodCreated is a free log subscription operation binding the contract event 0x9bec3cb55fcd181aaece51ed577f8a95b847c8af90535a81a7fa7d1c20138ef9.
//
// Solidity: event PodCreated(address indexed user, address indexed pod, address indexed operator)
func (_PodManager *PodManagerFilterer) WatchPodCreated(opts *bind.WatchOpts, sink chan<- *PodManagerPodCreated, user []common.Address, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "PodCreated", userRule, podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerPodCreated)
				if err := _PodManager.contract.UnpackLog(event, "PodCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePodCreated is a log parse operation binding the contract event 0x9bec3cb55fcd181aaece51ed577f8a95b847c8af90535a81a7fa7d1c20138ef9.
//
// Solidity: event PodCreated(address indexed user, address indexed pod, address indexed operator)
func (_PodManager *PodManagerFilterer) ParsePodCreated(log types.Log) (*PodManagerPodCreated, error) {
	event := new(PodManagerPodCreated)
	if err := _PodManager.contract.UnpackLog(event, "PodCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerPodDelegatedIterator is returned from FilterPodDelegated and is used to iterate over the raw logs and unpacked data for PodDelegated events raised by the PodManager contract.
type PodManagerPodDelegatedIterator struct {
	Event *PodManagerPodDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerPodDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerPodDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerPodDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerPodDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerPodDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerPodDelegated represents a PodDelegated event raised by the PodManager contract.
type PodManagerPodDelegated struct {
	Pod         common.Address
	AppContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterPodDelegated is a free log retrieval operation binding the contract event 0xef32074b263175118a4614cc3e2742c50b70facbf865c0c26da767dd095e167d.
//
// Solidity: event PodDelegated(address indexed pod, address indexed appContract)
func (_PodManager *PodManagerFilterer) FilterPodDelegated(opts *bind.FilterOpts, pod []common.Address, appContract []common.Address) (*PodManagerPodDelegatedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var appContractRule []interface{}
	for _, appContractItem := range appContract {
		appContractRule = append(appContractRule, appContractItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "PodDelegated", podRule, appContractRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerPodDelegatedIterator{contract: _PodManager.contract, event: "PodDelegated", logs: logs, sub: sub}, nil
}

// WatchPodDelegated is a free log subscription operation binding the contract event 0xef32074b263175118a4614cc3e2742c50b70facbf865c0c26da767dd095e167d.
//
// Solidity: event PodDelegated(address indexed pod, address indexed appContract)
func (_PodManager *PodManagerFilterer) WatchPodDelegated(opts *bind.WatchOpts, sink chan<- *PodManagerPodDelegated, pod []common.Address, appContract []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var appContractRule []interface{}
	for _, appContractItem := range appContract {
		appContractRule = append(appContractRule, appContractItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "PodDelegated", podRule, appContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerPodDelegated)
				if err := _PodManager.contract.UnpackLog(event, "PodDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePodDelegated is a log parse operation binding the contract event 0xef32074b263175118a4614cc3e2742c50b70facbf865c0c26da767dd095e167d.
//
// Solidity: event PodDelegated(address indexed pod, address indexed appContract)
func (_PodManager *PodManagerFilterer) ParsePodDelegated(log types.Log) (*PodManagerPodDelegated, error) {
	event := new(PodManagerPodDelegated)
	if err := _PodManager.contract.UnpackLog(event, "PodDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerPodUndelegatedIterator is returned from FilterPodUndelegated and is used to iterate over the raw logs and unpacked data for PodUndelegated events raised by the PodManager contract.
type PodManagerPodUndelegatedIterator struct {
	Event *PodManagerPodUndelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerPodUndelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerPodUndelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerPodUndelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerPodUndelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerPodUndelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerPodUndelegated represents a PodUndelegated event raised by the PodManager contract.
type PodManagerPodUndelegated struct {
	Pod common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPodUndelegated is a free log retrieval operation binding the contract event 0xfde114ec59a374c36954512dafbedfd68f4c4d137190476a76cddccd24697a3a.
//
// Solidity: event PodUndelegated(address indexed pod)
func (_PodManager *PodManagerFilterer) FilterPodUndelegated(opts *bind.FilterOpts, pod []common.Address) (*PodManagerPodUndelegatedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "PodUndelegated", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerPodUndelegatedIterator{contract: _PodManager.contract, event: "PodUndelegated", logs: logs, sub: sub}, nil
}

// WatchPodUndelegated is a free log subscription operation binding the contract event 0xfde114ec59a374c36954512dafbedfd68f4c4d137190476a76cddccd24697a3a.
//
// Solidity: event PodUndelegated(address indexed pod)
func (_PodManager *PodManagerFilterer) WatchPodUndelegated(opts *bind.WatchOpts, sink chan<- *PodManagerPodUndelegated, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "PodUndelegated", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerPodUndelegated)
				if err := _PodManager.contract.UnpackLog(event, "PodUndelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePodUndelegated is a log parse operation binding the contract event 0xfde114ec59a374c36954512dafbedfd68f4c4d137190476a76cddccd24697a3a.
//
// Solidity: event PodUndelegated(address indexed pod)
func (_PodManager *PodManagerFilterer) ParsePodUndelegated(log types.Log) (*PodManagerPodUndelegated, error) {
	event := new(PodManagerPodUndelegated)
	if err := _PodManager.contract.UnpackLog(event, "PodUndelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerTotalTVLUpdatedIterator is returned from FilterTotalTVLUpdated and is used to iterate over the raw logs and unpacked data for TotalTVLUpdated events raised by the PodManager contract.
type PodManagerTotalTVLUpdatedIterator struct {
	Event *PodManagerTotalTVLUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerTotalTVLUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerTotalTVLUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerTotalTVLUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerTotalTVLUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerTotalTVLUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerTotalTVLUpdated represents a TotalTVLUpdated event raised by the PodManager contract.
type PodManagerTotalTVLUpdated struct {
	NewTVL *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTotalTVLUpdated is a free log retrieval operation binding the contract event 0x6781bb9c83a65d946aefe506cbfb0817b2c859b3a822b74302fc199678c680de.
//
// Solidity: event TotalTVLUpdated(uint256 newTVL)
func (_PodManager *PodManagerFilterer) FilterTotalTVLUpdated(opts *bind.FilterOpts) (*PodManagerTotalTVLUpdatedIterator, error) {

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "TotalTVLUpdated")
	if err != nil {
		return nil, err
	}
	return &PodManagerTotalTVLUpdatedIterator{contract: _PodManager.contract, event: "TotalTVLUpdated", logs: logs, sub: sub}, nil
}

// WatchTotalTVLUpdated is a free log subscription operation binding the contract event 0x6781bb9c83a65d946aefe506cbfb0817b2c859b3a822b74302fc199678c680de.
//
// Solidity: event TotalTVLUpdated(uint256 newTVL)
func (_PodManager *PodManagerFilterer) WatchTotalTVLUpdated(opts *bind.WatchOpts, sink chan<- *PodManagerTotalTVLUpdated) (event.Subscription, error) {

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "TotalTVLUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerTotalTVLUpdated)
				if err := _PodManager.contract.UnpackLog(event, "TotalTVLUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTotalTVLUpdated is a log parse operation binding the contract event 0x6781bb9c83a65d946aefe506cbfb0817b2c859b3a822b74302fc199678c680de.
//
// Solidity: event TotalTVLUpdated(uint256 newTVL)
func (_PodManager *PodManagerFilterer) ParseTotalTVLUpdated(log types.Log) (*PodManagerTotalTVLUpdated, error) {
	event := new(PodManagerTotalTVLUpdated)
	if err := _PodManager.contract.UnpackLog(event, "TotalTVLUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the PodManager contract.
type PodManagerUnpausedIterator struct {
	Event *PodManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerUnpaused represents a Unpaused event raised by the PodManager contract.
type PodManagerUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PodManager *PodManagerFilterer) FilterUnpaused(opts *bind.FilterOpts) (*PodManagerUnpausedIterator, error) {

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &PodManagerUnpausedIterator{contract: _PodManager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PodManager *PodManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *PodManagerUnpaused) (event.Subscription, error) {

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerUnpaused)
				if err := _PodManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PodManager *PodManagerFilterer) ParseUnpaused(log types.Log) (*PodManagerUnpaused, error) {
	event := new(PodManagerUnpaused)
	if err := _PodManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerVerifyBitcoinDepositRequestIterator is returned from FilterVerifyBitcoinDepositRequest and is used to iterate over the raw logs and unpacked data for VerifyBitcoinDepositRequest events raised by the PodManager contract.
type PodManagerVerifyBitcoinDepositRequestIterator struct {
	Event *PodManagerVerifyBitcoinDepositRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerVerifyBitcoinDepositRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerVerifyBitcoinDepositRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerVerifyBitcoinDepositRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerVerifyBitcoinDepositRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerVerifyBitcoinDepositRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerVerifyBitcoinDepositRequest represents a VerifyBitcoinDepositRequest event raised by the PodManager contract.
type PodManagerVerifyBitcoinDepositRequest struct {
	Pod                   common.Address
	Operator              common.Address
	BitcoinDepositRequest IBitcoinPodManagerBitcoinDepositRequest
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterVerifyBitcoinDepositRequest is a free log retrieval operation binding the contract event 0x19e46e0ef253a265a935e867bddd4047e0ea6700a3b5254cc16dea197da7595e.
//
// Solidity: event VerifyBitcoinDepositRequest(address indexed pod, address indexed operator, (bytes32,uint256,bool) bitcoinDepositRequest)
func (_PodManager *PodManagerFilterer) FilterVerifyBitcoinDepositRequest(opts *bind.FilterOpts, pod []common.Address, operator []common.Address) (*PodManagerVerifyBitcoinDepositRequestIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "VerifyBitcoinDepositRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerVerifyBitcoinDepositRequestIterator{contract: _PodManager.contract, event: "VerifyBitcoinDepositRequest", logs: logs, sub: sub}, nil
}

// WatchVerifyBitcoinDepositRequest is a free log subscription operation binding the contract event 0x19e46e0ef253a265a935e867bddd4047e0ea6700a3b5254cc16dea197da7595e.
//
// Solidity: event VerifyBitcoinDepositRequest(address indexed pod, address indexed operator, (bytes32,uint256,bool) bitcoinDepositRequest)
func (_PodManager *PodManagerFilterer) WatchVerifyBitcoinDepositRequest(opts *bind.WatchOpts, sink chan<- *PodManagerVerifyBitcoinDepositRequest, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "VerifyBitcoinDepositRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerVerifyBitcoinDepositRequest)
				if err := _PodManager.contract.UnpackLog(event, "VerifyBitcoinDepositRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyBitcoinDepositRequest is a log parse operation binding the contract event 0x19e46e0ef253a265a935e867bddd4047e0ea6700a3b5254cc16dea197da7595e.
//
// Solidity: event VerifyBitcoinDepositRequest(address indexed pod, address indexed operator, (bytes32,uint256,bool) bitcoinDepositRequest)
func (_PodManager *PodManagerFilterer) ParseVerifyBitcoinDepositRequest(log types.Log) (*PodManagerVerifyBitcoinDepositRequest, error) {
	event := new(PodManagerVerifyBitcoinDepositRequest)
	if err := _PodManager.contract.UnpackLog(event, "VerifyBitcoinDepositRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
